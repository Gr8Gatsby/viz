{"mappings":"ACIA,MAAM,EAAY,SAAS,cAAc,CAAC,aACpC,EAAW,SAAS,cAAc,CAAC,YACnC,EAAmB,SAAS,cAAc,CAAC,oBAG3C,EAAuB,IAAM,AAAmB,aAAnB,OAAO,QAGpC,EAAkB,KACtB,GAAI,CAAC,IAAwB,CAC3B,MAAM,mDACN,MACF,CACK,aAAa,OAAO,CAAC,eACxB,aAAa,OAAO,CAAC,aAAc,KAAK,SAAS,CAAC,CAAC,GAEvD,EAGM,EAAmB,MAAO,IAC9B,IAAM,EAAO,EAAM,MAAM,CAAC,KAAK,CAAC,EAAE,CAClC,GAAI,GAAQ,EAAK,IAAI,EAAI,QAAa,CACpC,IAAM,EAAc,MAAM,EAAK,IAAI,GACnC,EAAS,EAAK,IAAI,CAAE,GACpB,GACF,MACE,MAAM,sCAEV,EAGM,EAAW,CAAC,EAAU,KAC1B,IAAM,EAAa,KAAK,KAAK,CAAC,aAAa,OAAO,CAAC,gBAAkB,CAAC,CACtE,CAAA,CAAU,CAAC,EAAS,CAAG,EACvB,aAAa,OAAO,CAAC,aAAc,KAAK,SAAS,CAAC,GACpD,EAGM,EAAe,KACnB,IAAM,EAAa,KAAK,KAAK,CAAC,aAAa,OAAO,CAAC,gBAAkB,CAAC,CACtE,CAAA,EAAS,SAAS,CAAG,GACrB,OAAO,IAAI,CAAC,GAAY,OAAO,CAAC,AAAC,IAC/B,IAAM,EAAW,SAAS,aAAa,CAAC,KACxC,CAAA,EAAS,WAAW,CAAG,EACvB,EAAS,WAAW,CAAC,EACvB,EACF,EAWA,SAAS,gBAAgB,CAAC,mBARV,KACd,IACA,IACA,EAAU,gBAAgB,CAAC,SAAU,GACrC,EAAiB,gBAAgB,CAAC,QAAS,IAAM,EAAU,KAAK,GAClE","sources":["<anon>","src/js/app.js"],"sourcesContent":["// app.js\n// Core functionality for data management and UI interactions\n// Select DOM elements\nconst fileInput = document.getElementById(\"fileInput\");\nconst fileList = document.getElementById(\"fileList\");\nconst fileUploadButton = document.getElementById(\"fileUploadButton\");\n// Check for local storage support\nconst supportsLocalStorage = ()=>typeof Storage !== \"undefined\";\n// Initialize data storage\nconst initDataStorage = ()=>{\n    if (!supportsLocalStorage()) {\n        alert(\"Local storage is not supported in your browser.\");\n        return;\n    }\n    if (!localStorage.getItem(\"fileSpaces\")) localStorage.setItem(\"fileSpaces\", JSON.stringify({}));\n};\n// Handle file upload\nconst handleFileUpload = async (event)=>{\n    const file = event.target.files[0];\n    if (file && file.size <= 1048576) {\n        const fileContent = await file.text();\n        saveFile(file.name, fileContent);\n        displayFiles();\n    } else alert(\"Please upload a file less than 1MB.\");\n};\n// Save file to local storage\nconst saveFile = (fileName, fileContent)=>{\n    const fileSpaces = JSON.parse(localStorage.getItem(\"fileSpaces\")) || {};\n    fileSpaces[fileName] = fileContent;\n    localStorage.setItem(\"fileSpaces\", JSON.stringify(fileSpaces));\n};\n// Display files in the UI\nconst displayFiles = ()=>{\n    const fileSpaces = JSON.parse(localStorage.getItem(\"fileSpaces\")) || {};\n    fileList.innerHTML = \"\"; // Clear current list\n    Object.keys(fileSpaces).forEach((fileName)=>{\n        const listItem = document.createElement(\"li\");\n        listItem.textContent = fileName;\n        fileList.appendChild(listItem);\n    });\n};\n// Initialize app\nconst initApp = ()=>{\n    initDataStorage();\n    displayFiles();\n    fileInput.addEventListener(\"change\", handleFileUpload);\n    fileUploadButton.addEventListener(\"click\", ()=>fileInput.click());\n};\n// Start the application\ndocument.addEventListener(\"DOMContentLoaded\", initApp);\n\n//# sourceMappingURL=index.6213a224.js.map\n","// app.js\n// Core functionality for data management and UI interactions\n\n// Select DOM elements\nconst fileInput = document.getElementById('fileInput');\nconst fileList = document.getElementById('fileList');\nconst fileUploadButton = document.getElementById('fileUploadButton');\n\n// Check for local storage support\nconst supportsLocalStorage = () => typeof Storage !== 'undefined';\n\n// Initialize data storage\nconst initDataStorage = () => {\n  if (!supportsLocalStorage()) {\n    alert('Local storage is not supported in your browser.');\n    return;\n  }\n  if (!localStorage.getItem('fileSpaces')) {\n    localStorage.setItem('fileSpaces', JSON.stringify({}));\n  }\n};\n\n// Handle file upload\nconst handleFileUpload = async (event) => {\n  const file = event.target.files[0];\n  if (file && file.size <= 1024 * 1024) { // Limit file size to 1MB\n    const fileContent = await file.text();\n    saveFile(file.name, fileContent);\n    displayFiles();\n  } else {\n    alert('Please upload a file less than 1MB.');\n  }\n};\n\n// Save file to local storage\nconst saveFile = (fileName, fileContent) => {\n  const fileSpaces = JSON.parse(localStorage.getItem('fileSpaces')) || {};\n  fileSpaces[fileName] = fileContent;\n  localStorage.setItem('fileSpaces', JSON.stringify(fileSpaces));\n};\n\n// Display files in the UI\nconst displayFiles = () => {\n  const fileSpaces = JSON.parse(localStorage.getItem('fileSpaces')) || {};\n  fileList.innerHTML = ''; // Clear current list\n  Object.keys(fileSpaces).forEach((fileName) => {\n    const listItem = document.createElement('li');\n    listItem.textContent = fileName;\n    fileList.appendChild(listItem);\n  });\n};\n\n// Initialize app\nconst initApp = () => {\n  initDataStorage();\n  displayFiles();\n  fileInput.addEventListener('change', handleFileUpload);\n  fileUploadButton.addEventListener('click', () => fileInput.click());\n};\n\n// Start the application\ndocument.addEventListener('DOMContentLoaded', initApp);"],"names":["fileInput","document","getElementById","fileList","fileUploadButton","supportsLocalStorage","Storage","initDataStorage","alert","localStorage","getItem","setItem","JSON","stringify","handleFileUpload","event","file","target","files","size","fileContent","text","saveFile","name","displayFiles","fileName","fileSpaces","parse","innerHTML","Object","keys","forEach","listItem","createElement","textContent","appendChild","addEventListener","click"],"version":3,"file":"index.6213a224.js.map"}